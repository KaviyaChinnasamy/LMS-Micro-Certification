{"ast":null,"code":"const API = \"http://localhost:5000/api\"; // backend URL\n\nexport async function register(name, email, password) {\n  const res = await fetch(`${API}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      name,\n      email,\n      password\n    })\n  });\n  return res.json();\n}\nexport async function login(email, password) {\n  const res = await fetch(`${API}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  return res.json();\n}\nexport async function fetchQuiz(quizId) {\n  const res = await fetch(`${API}/quiz/${quizId}`);\n  return res.json();\n}\nexport async function submitQuiz(token, quizId, answers) {\n  const res = await fetch(`${API}/result/submit`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      quizId,\n      answers\n    })\n  });\n  return res.json();\n}\nexport async function fetchLeaderboard(quizId) {\n  const res = await fetch(`${API}/result/leaderboard/${quizId}`);\n  return res.json();\n}\nexport async function downloadCertificate(token, resultId) {\n  const res = await fetch(`${API}/cert/download/${resultId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to download\");\n  const blob = await res.blob();\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = `certificate_${resultId}.pdf`;\n  a.click();\n  window.URL.revokeObjectURL(url);\n}","map":{"version":3,"names":["API","register","name","email","password","res","fetch","method","headers","body","JSON","stringify","json","login","fetchQuiz","quizId","submitQuiz","token","answers","Authorization","fetchLeaderboard","downloadCertificate","resultId","ok","Error","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL"],"sources":["D:/visual studio/LMS Micro-Certification/Frontend/src/api.js"],"sourcesContent":["const API = \"http://localhost:5000/api\"; // backend URL\r\n\r\nexport async function register(name, email, password) {\r\n  const res = await fetch(`${API}/auth/register`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ name, email, password })\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function login(email, password) {\r\n  const res = await fetch(`${API}/auth/login`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password })\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function fetchQuiz(quizId) {\r\n  const res = await fetch(`${API}/quiz/${quizId}`);\r\n  return res.json();\r\n}\r\n\r\nexport async function submitQuiz(token, quizId, answers) {\r\n  const res = await fetch(`${API}/result/submit`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`\r\n    },\r\n    body: JSON.stringify({ quizId, answers })\r\n  });\r\n  return res.json();\r\n}\r\n\r\nexport async function fetchLeaderboard(quizId) {\r\n  const res = await fetch(`${API}/result/leaderboard/${quizId}`);\r\n  return res.json();\r\n}\r\n\r\nexport async function downloadCertificate(token, resultId) {\r\n  const res = await fetch(`${API}/cert/download/${resultId}`, {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  });\r\n  if (!res.ok) throw new Error(\"Failed to download\");\r\n  const blob = await res.blob();\r\n  const url = window.URL.createObjectURL(blob);\r\n  const a = document.createElement(\"a\");\r\n  a.href = url;\r\n  a.download = `certificate_${resultId}.pdf`;\r\n  a.click();\r\n  window.URL.revokeObjectURL(url);\r\n}\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAAG,2BAA2B,CAAC,CAAC;;AAEzC,OAAO,eAAeC,QAAQA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EACpD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,GAAG,gBAAgB,EAAE;IAC9CO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAET,IAAI;MAAEC,KAAK;MAAEC;IAAS,CAAC;EAChD,CAAC,CAAC;EACF,OAAOC,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeC,KAAKA,CAACV,KAAK,EAAEC,QAAQ,EAAE;EAC3C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,GAAG,aAAa,EAAE;IAC3CO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,OAAOC,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeE,SAASA,CAACC,MAAM,EAAE;EACtC,MAAMV,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,GAAG,SAASe,MAAM,EAAE,CAAC;EAChD,OAAOV,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeI,UAAUA,CAACC,KAAK,EAAEF,MAAM,EAAEG,OAAO,EAAE;EACvD,MAAMb,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,GAAG,gBAAgB,EAAE;IAC9CO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCW,aAAa,EAAE,UAAUF,KAAK;IAChC,CAAC;IACDR,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEI,MAAM;MAAEG;IAAQ,CAAC;EAC1C,CAAC,CAAC;EACF,OAAOb,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeQ,gBAAgBA,CAACL,MAAM,EAAE;EAC7C,MAAMV,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,GAAG,uBAAuBe,MAAM,EAAE,CAAC;EAC9D,OAAOV,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeS,mBAAmBA,CAACJ,KAAK,EAAEK,QAAQ,EAAE;EACzD,MAAMjB,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,GAAG,kBAAkBsB,QAAQ,EAAE,EAAE;IAC1Dd,OAAO,EAAE;MAAEW,aAAa,EAAE,UAAUF,KAAK;IAAG;EAC9C,CAAC,CAAC;EACF,IAAI,CAACZ,GAAG,CAACkB,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;EAClD,MAAMC,IAAI,GAAG,MAAMpB,GAAG,CAACoB,IAAI,CAAC,CAAC;EAC7B,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;EAC5C,MAAMK,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACrCF,CAAC,CAACG,IAAI,GAAGP,GAAG;EACZI,CAAC,CAACI,QAAQ,GAAG,eAAeZ,QAAQ,MAAM;EAC1CQ,CAAC,CAACK,KAAK,CAAC,CAAC;EACTR,MAAM,CAACC,GAAG,CAACQ,eAAe,CAACV,GAAG,CAAC;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}